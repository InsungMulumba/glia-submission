import Head from "next/head";
import { useState, useEffect } from "react";

import {
  Main,
  ActivityContainer,
  ActivityData,
  ActivityLabel,
  ActivityTitle,
  Button,
  ErrorMessage,
  Title,
  UserForm,
} from "../styles/styles";

export default function Home() {
  enum Price {
    HIGH = "High",
    LOW = "Low",
    FREE = "Free",
  }

  enum Accessibility {
    HIGH = "High",
    MEDIUM = "Medium",
    LOW = "Low",
  }

  const [activity, setActivity] = useState();
  const [error, setError] = useState("");
  const [name, setUserName] = useState("");
  const [price, setUserPrice] = useState(Price.HIGH);
  const [accessibility, setUserAccessibility] = useState(Accessibility.LOW);

  useEffect(() => {
    fetchNewActivity();
  }, []);

  function fetchNewActivity() {
    fetch("http://localhost:3001/activity")
      .then((response) => response.json())
      .catch((err) => {
        console.log(err);
        setError("No activity returned, likely due to API not running");
      })
      .then((data) => {
        if (data?.error === "No activity found with the specified parameters") {
          setError(
            "No activities fit the user profile, try creating a new one"
          );
          return;
        }
        setError("");
        setActivity(data);
      });
  }

  function handleUserProfileSubmission(event: any) {
    event.preventDefault();

    fetch("http://localhost:3001/user", {
      method: "POST",
      headers: {
        Accept: "application/json",
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        name,
        accessibility,
        price,
      }),
    }).then((response) => response.json());
  }

  return (
    <>
      <Head>
        <title>Bored API</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Main>
        <Title>Activity</Title>
        <ActivityContainer>
          {activity && (
            <>
              {Object.keys(activity).map((key, index) => {
                return (
                  <ActivityLabel key={index}>
                    <ActivityTitle>{key}: </ActivityTitle>
                    <ActivityData>{activity[key]}</ActivityData>
                  </ActivityLabel>
                );
              })}
            </>
          )}
          {error !== "" && <ErrorMessage>{error}</ErrorMessage>}
          <Button onClick={fetchNewActivity}>Fetch New Activity</Button>
        </ActivityContainer>
        <Title>Create New User</Title>
        <UserForm onSubmit={handleUserProfileSubmission}>
          <label htmlFor="name">Name</label>
          <input
            onBlur={(e) => setUserName(e.target.value)}
            required
            id="name"
            type="text"
          />

          <label htmlFor="price">Price</label>

          <select
            name="price"
            id="price"
            onChange={(e) => setUserPrice(e.target.value as Price)}
          >
            <option value="Free">{Price.FREE}</option>
            <option value="Low">{Price.LOW}</option>
            <option value="High">{Price.HIGH}</option>
          </select>

          <label htmlFor="accessibility">Accessibility</label>
          <select
            name="accessibility"
            id="accessibility"
            onChange={(e) =>
              setUserAccessibility(e.target.value as Accessibility)
            }
          >
            <option value="Low">Low</option>
            <option value="Medium">Medium</option>
            <option value="High">High</option>
          </select>
          <Button type="submit">Submit</Button>
        </UserForm>
      </Main>
    </>
  );
}
